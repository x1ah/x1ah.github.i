<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>x1ah&#39;s blog</title>
  <subtitle>因为我们都是凡人</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://x1ah.com/"/>
  <updated>2016-11-06T15:51:26.000Z</updated>
  <id>http://x1ah.com/</id>
  
  <author>
    <name>x1ah</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>编程环境搭建(ElementaryOS)</title>
    <link href="http://x1ah.com/2016/11/05/Programing-Environment-ElementaryOS/"/>
    <id>http://x1ah.com/2016/11/05/Programing-Environment-ElementaryOS/</id>
    <published>2016-11-06T01:44:41.000Z</published>
    <updated>2016-11-06T15:51:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>Keep It Simple, Stupid!</p>
<a id="more"></a>
<p>前阵子因为我的Ubuntu出了点问题，也懒得去fix，于是推了换成了Elementary OS Loki，又配了一遍环境。每次换系统最头疼的大概就是得重新搭建自己的编程环境，备份恢复各种数据文件代码仓库，折腾次数多了自然也有了自己的一套方案。以下内容适用基于 Ubuntu 的系统，演示环境是英文Elementary OS Loki.中文一直没有解决Applicatioins面板搜索无效Bug.</p>
<h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p>有一习惯，电脑里除了需要用的东西，代码，几乎不放东西，所以，240G的盘也才用了60+G，视频照片之类统统放移动硬盘，几乎所有代码都放<a href="https://github.com/x1ah" target="_blank" rel="external">GitHub</a>了，备份<code>～/.ssh/</code>目录,系统也定时备份，防止突发情况。备份系统之前有<a href="http://x1ah.cn/2016/05/18/backup_your_linux/" target="_blank" rel="external">一篇笔记</a>,</p>
<h2 id="软件-开发工具"><a href="#软件-开发工具" class="headerlink" title="软件,开发工具"></a>软件,开发工具</h2><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>首先肯定是Git了,几乎离不开Git和GitHub了.习惯先把备份的<code>.ssh/</code>目录先恢复，没有就掠过。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install git</div></pre></td></tr></table></figure></p>
<h3 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install vim</div></pre></td></tr></table></figure>
<p>强烈推荐一份<a href="https://github.com/wklken/k-vim" target="_blank" rel="external">Vim配置 k-vim</a>,之后YCM一般都需要自行编译安装，参考<a href="https://github.com/Valloric/YouCompleteMe" target="_blank" rel="external">YCK文档</a>,比较耗时</p>
<h3 id="Gdebi"><a href="#Gdebi" class="headerlink" title="Gdebi"></a>Gdebi</h3><p>用来更方便安装deb包的工具，会自行解决依赖问题，不用自己找依赖balabala,之前用<code>sudo apt-get install -f</code>也能解决大部分依赖问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install gdebi</div></pre></td></tr></table></figure></p>
<h3 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h3><p>Chrome 可以自行添加源安装，这里上传到网盘里直接下<a href="http://pan.baidu.com/s/1pLgxZPT" target="_blank" rel="external">Google-Chrome-stable-54</a>,密码2bs9<br>之后直接用<code>gdebi</code>安装<code>sudo gdebi ***.deb</code>一路确定，Gdebi 会自行安装依赖包，</p>
<h3 id="shadowsocks"><a href="#shadowsocks" class="headerlink" title="shadowsocks"></a>shadowsocks</h3><p>不能自由上网还怎么愉快的写代码……不推荐安装GUI版的Shadowsocks，使用太麻烦.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install python-dev python3-dev python-pip</div><div class="line">$ sudo pip install shadowsocks</div></pre></td></tr></table></figure></p>
<p>测试一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sslocal --help</div></pre></td></tr></table></figure></p>
<p>然后需要准备一份自己的shadowsocks配置，<a href="http://www.ishadowsocks.org/" target="_blank" rel="external">这里</a>有一个免费的ss帐号提供站，速度还可以的，六小时更换一次密码，可以自己写个爬虫脚本定时更新本地的。<br><a href="https://aitanlu.com/ubuntu-shadowsocks-ke-hu-duan-pei-zhi.html" target="_blank" rel="external">这里有一篇教程</a>写的很详细，直接看这个教程吧。</p>
<h3 id="fcitx"><a href="#fcitx" class="headerlink" title="fcitx"></a>fcitx</h3><p>输入法推荐用Fcitx框架代替系统的Ibus</p>
<ul>
<li><p>卸载ibus并安装fcitx：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get remove ibus</div><div class="line">$ sudo apt-fast install fcitx fcitx-config-gtk</div><div class="line">$ sudo apt-get install fcitx-table-all</div></pre></td></tr></table></figure>
</li>
<li><p>设置默认输入法管理器为fcitx：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install im-switch</div><div class="line">$ im-switch -s fcitx -z default</div></pre></td></tr></table></figure>
</li>
</ul>
<p>到这里，fcitx已经安装好了，下面可以选择就很多了，如果是双拼，直接就能在<code>fcitx-configtool</code>选择安装了，或者选择更容易崩溃但是更强大的<a href="http://pinyin.sogou.com/linux/?r=pinyin" target="_blank" rel="external">搜狗输入法</a>，下对应deb包用gdebi安装.</p>
<h3 id="网易云音乐"><a href="#网易云音乐" class="headerlink" title="网易云音乐"></a>网易云音乐</h3><p>感谢网易，出了这么一款音乐软件，还是跨平台的..<a href="http://music.163.com/#/download" target="_blank" rel="external">NetEase Music</a></p>
<h3 id="Zsh-Tmux"><a href="#Zsh-Tmux" class="headerlink" title="Zsh, Tmux"></a>Zsh, Tmux</h3><p><a href="">Zsh</a> 是一款功能强大终端（shell）软件，既可以作为一个交互式终端，也可以作为一个脚本解释器。它在兼容 Bash 的同时 (默认不兼容，除非设置成 emulate sh) 还有提供了很多改进，可定制化很高， <a href="https://tmux.github.io/" target="_blank" rel="external">Tmux</a> 也是一款终端神器，分屏多窗口多界面，以及有效防止ssh断连情况下丢失当前状态，几乎完美的解决方案。zsh配置方案推荐<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="external">Oh-My-Zsh</a>，这几乎是人尽皆知的了。Tmux推荐<a href="https://github.com/tony/tmux-config" target="_blank" rel="external">这个配置</a>,配置方法在文档都有。</p>
<h3 id="pyenv-virtualenv"><a href="#pyenv-virtualenv" class="headerlink" title="pyenv, virtualenv"></a>pyenv, virtualenv</h3><p>Python开发使用的工具，文档在这里<a href="https://github.com/yyuu/pyenv" target="_blank" rel="external">pyenv</a>, <a href="https://github.com/pypa/virtualenv" target="_blank" rel="external">virtualenv</a></p>
<h3 id="IDE-Editor"><a href="#IDE-Editor" class="headerlink" title="IDE/Editor"></a>IDE/Editor</h3><ul>
<li><strong>Sublime</strong>): 自带的scratch/gedit也能用，但是用来写代码还是稍逊一筹，文档<a href="https://www.sublimetext.com/3" target="_blank" rel="external">在这</a>,之后就可以自行谷歌搜一些改配置，装插件的教程。。</li>
<li><strong>Pycharm</strong>: 与其说Pycharm不如说Jet Brain 家族工具.教育邮箱认证就能免费用全家桶了(PS:如果有需求lz可以提供几个认证过的帐号或LICENCE)，<a href="https://www.jetbrains.com/" target="_blank" rel="external">下载</a></li>
<li><strong>Atom</strong>: GitHub 的开源作品，很不错的text editor<a href="https://atom.io/" target="_blank" rel="external">(A hackable text editor for the 21st Century)</a></li>
<li><strong>这些工具都自行取舍ba</strong></li>
</ul>
<h2 id="小工具推荐以及系统美化"><a href="#小工具推荐以及系统美化" class="headerlink" title="小工具推荐以及系统美化"></a>小工具推荐以及系统美化</h2><h3 id="终端配色，主题"><a href="#终端配色，主题" class="headerlink" title="终端配色，主题"></a>终端配色，主题</h3><p>强烈推荐<a href="https://github.com/Mayccoll/Gogh" target="_blank" rel="external">Gogh</a>，换配色从未如此简单</p>
<h3 id="Consolas-字体"><a href="#Consolas-字体" class="headerlink" title="Consolas 字体"></a>Consolas 字体</h3><p><a href="http://www.mycode.net.cn/platform/741.html" target="_blank" rel="external">这里</a>有一篇挺详细的教程,搭配 Solarsize dark 配色，一直在用.</p>
<h3 id="apt-fast"><a href="#apt-fast" class="headerlink" title="apt-fast"></a>apt-fast</h3><p>这是一个跟<code>apt-get</code>功能类似的一个工具，通过多线程下载的方式来加快<code>apt-get</code>下载速度，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo add-apt-repository ppa:saiarcot895/myppa</div><div class="line">$ sudo apt-get update</div><div class="line">$ sudo apt-get -y install apt-fast</div></pre></td></tr></table></figure></p>
<p>如果上面会提示<code>add-apt-repository command not found</code>，安装它就成了<code>apt-get install software-properties-common</code><br>安装完了更新源体验一下吧：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-fast update</div></pre></td></tr></table></figure></p>
<h3 id="Elementary-tweaks-ubuntu-tweaks"><a href="#Elementary-tweaks-ubuntu-tweaks" class="headerlink" title="Elementary-tweaks / ubuntu-tweaks"></a>Elementary-tweaks / ubuntu-tweaks</h3><p>系统工具，Elementary-tweaks可以提供很多系统设置里没有的选项，<a href="https://github.com/elementary-tweaks/elementary-tweaks" target="_blank" rel="external">这里安装文档</a>.对于Ubuntu，安装<a href="https://github.com/tualatrix/ubuntu-tweak/releases" target="_blank" rel="external">ubuntu-tweaks</a></p>
<h3 id="typespeed"><a href="#typespeed" class="headerlink" title="typespeed"></a>typespeed</h3><p>一款终端打字练习软件，支持English, German, French, Italian等等，甚至还有Unix command.安装也极为简单，直接<code>sudo apt-get install typespeed</code></p>
<h3 id="wireshark-Postman"><a href="#wireshark-Postman" class="headerlink" title="wireshark / Postman"></a>wireshark / Postman</h3><p>跨平台抓包工具，非常强大,需要一定专业知识。<a href="https://www.wireshark.org/" target="_blank" rel="external">官网在这儿</a>,与之类似的有一款Chrome Apps<a href="https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?utm_source=chrome-ntp-icon" target="_blank" rel="external">Postman</a></p>
<h3 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h3><p>出了这些，还有很多没有推荐，另外，Chrome 有很多好玩儿的插件，之后再继续更新Chrome 插件.</p>
<p>End.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Keep It Simple, Stupid!&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://x1ah.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Linux" scheme="http://x1ah.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Python logging 模块小记</title>
    <link href="http://x1ah.com/2016/08/15/Python-logging-Module/"/>
    <id>http://x1ah.com/2016/08/15/Python-logging-Module/</id>
    <published>2016-08-15T04:26:06.000Z</published>
    <updated>2016-10-21T12:02:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近需要使用 logging 模块，但是<a href="https://docs.python.org/2/library/logging.html" target="_blank" rel="external">官方文档</a> 却感觉不是那么好理解，于是找了几篇教程博客学习学习，记记笔记防止忘了。这里只记最简单的几个功能特性吧，复杂的暂时还没有用到。</p>
<a id="more"></a>
<p>部分参考自<a href="http://www.jianshu.com/p/feb86c06c4f4" target="_blank" rel="external">好吃的野菜的简书</a></p>
<p><em>This module defines functions and classes which implement a flexible event logging system for applications and libraries.</em> (该模块定义的函数和类为应用程序和库实现了一个灵活的事件日志系统),文档第一句话便解释了这个模块的功能特点，日志系统，灵活。</p>
<h1 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h1><h2 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a><strong>日志级别</strong></h2><p>通俗的说，日志级别就是用来区分日志的重要性的，有 6 个等级，都有默认的值，如下:</p>
<table>
<thead>
<tr>
<th>Level</th>
<th>Value</th>
<th>Reference</th>
</tr>
</thead>
<tbody>
<tr>
<td>NOTSET</td>
<td>0</td>
<td>没有设置</td>
</tr>
<tr>
<td>DEBUG</td>
<td>10</td>
<td>调试信息</td>
</tr>
<tr>
<td>INFO</td>
<td>20</td>
<td>程序正常，记录日志</td>
</tr>
<tr>
<td>WARNING</td>
<td>30</td>
<td>发生了一些小意外，但是系统还能正常运行，给出一个警告</td>
</tr>
<tr>
<td>ERROR</td>
<td>40</td>
<td>由于更严重的问题，软件已不能执行一些功能了，发出错误信息</td>
</tr>
<tr>
<td>CRITICAL</td>
<td>50</td>
<td>严重错误，表明软件已不能继续运行了</td>
</tr>
</tbody>
</table>
<h2 id="Logger-记录器-对象"><a href="#Logger-记录器-对象" class="headerlink" title="Logger(记录器) 对象"></a>Logger(记录器) 对象</h2><p>在我们开始记录日志之前必须创建一个记录器对象，可理解为就是用来记录的。</p>
<h2 id="Handler-处理器-对象"><a href="#Handler-处理器-对象" class="headerlink" title="Handler(处理器) 对象"></a>Handler(处理器) 对象</h2><p>在上面创建了一个记录器之后，记录了日志，我们需要去处理日志，这就是 Handler 的作用了，用来处理日志的。</p>
<h2 id="Formatter-格式-对象"><a href="#Formatter-格式-对象" class="headerlink" title="Formatter(格式) 对象"></a>Formatter(格式) 对象</h2><p>也就是日志的格式之类</p>
<h2 id="Filter-过滤器-对象"><a href="#Filter-过滤器-对象" class="headerlink" title="Filter(过滤器) 对象"></a>Filter(过滤器) 对象</h2><p>顾名思义，用来过滤日志的。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>了解了这些名词，按照一般的流程，首先得有个记录器来记录，记录的同时还需要一个处理器来处理记录的日志，处理的时候我们可以自己定义一些格式，来使日志按照这些格式走流程，除此之外，我们还可以建立一个过滤器，进行过滤。所以 我们就可以按照这个思路进行编写代码了。</p>
<h2 id="第一步-Logger"><a href="#第一步-Logger" class="headerlink" title="第一步: Logger"></a>第一步: Logger</h2><ul>
<li>首先，可以对logging先做一个简单的配置，省去后面对每个”器”单独配置</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> logging</div><div class="line"></div><div class="line">logging.basicConfig(level=logging.DEBUG,</div><div class="line">                    format=<span class="string">'%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s'</span>,</div><div class="line">                    datefmt=<span class="string">'%a, %d %b %Y %H:%M:%S'</span>,</div><div class="line">                    filename=<span class="string">'foo.log'</span>,</div><div class="line">                    filemode=<span class="string">'a'</span>)</div></pre></td></tr></table></figure>
<ul>
<li><code>basicConfig()</code> 带的参数可以<code>dir(logging.basicConfig)</code>查看。 </li>
<li><code>level=logging.DEBUG</code> 表示 只有日志级别高于DEBUG的才会输出(打印到屏幕，或写入)</li>
<li><code>format=******</code> 表示 handler使用指明的格式化字符串</li>
</ul>
<p>这里格式化有很多方法，有下面这些格式，可以任意增添</p>
<table>
<thead>
<tr>
<th>格式</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>%(levelno)s</td>
<td>打印日志级别的数值</td>
</tr>
<tr>
<td>%(levelname)s</td>
<td>打印日志级别名称</td>
</tr>
<tr>
<td>%(pathname)s</td>
<td>打印当前执行程序的路径</td>
</tr>
<tr>
<td>%(filename)s</td>
<td>打印当前执行程序名称</td>
</tr>
<tr>
<td>%(funcName)s</td>
<td>打印日志的当前函数</td>
</tr>
<tr>
<td>%(name)s</td>
<td>用户名</td>
</tr>
<tr>
<td>%(lineno)d</td>
<td>打印日志的当前行号</td>
</tr>
<tr>
<td>%(asctime)s</td>
<td>打印日志的时间</td>
</tr>
<tr>
<td>%(thread)d</td>
<td>打印线程id</td>
</tr>
<tr>
<td>%(threadName)s</td>
<td>打印线程名称</td>
</tr>
<tr>
<td>%(process)d</td>
<td>打印进程ID</td>
</tr>
<tr>
<td>%(message)s</td>
<td>打印日志信息</td>
</tr>
<tr>
<td>————</td>
</tr>
</tbody>
</table>
<ul>
<li><code>datafmt=*****</code> 表示使用指明的日期／时间格式， 时间格式也有很多格式, 更详细参考<a href="https://docs.python.org/2/library/time.html?highlight=strftime#time.strftime" target="_blank" rel="external">文档</a></li>
</ul>
<table>
<thead>
<tr>
<th>Directive</th>
<th>Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>%a</td>
<td>Locale’s abbreviated weekday name.</td>
</tr>
<tr>
<td>%A</td>
<td>Locale’s full weekday name.  </td>
</tr>
<tr>
<td>%b</td>
<td>Locale’s abbreviated month name.     </td>
</tr>
<tr>
<td>%B</td>
<td>Locale’s full month name.    </td>
</tr>
<tr>
<td>%c</td>
<td>Locale’s appropriate date and time representation.   </td>
</tr>
<tr>
<td>%d</td>
<td>Day of the month as a decimal number [01,31].    </td>
</tr>
<tr>
<td>%%</td>
<td>A literal ‘%’ character.</td>
</tr>
</tbody>
</table>
<p>更多参考<a href="https://docs.python.org/2/library/time.html?highlight=strftime#time.strftime" target="_blank" rel="external">文档</a></p>
<ul>
<li><code>filemode=&#39;a&#39;</code> 处理日志文件模式</li>
<li><p><code>filename=****</code> 表示日志文件，可以对该文件进行上面指定模式进行读写，默认为’a’</p>
</li>
<li><p>创建 Logger ，<strong>注意，文档上有一句话，Note that Loggers are never instantiated directly, but always through the module-level function logging.getLogger(name)</strong></p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">logger_name = <span class="string">'balabala'</span></div><div class="line">logger = logging.getLogger(logger_name)</div></pre></td></tr></table></figure>
<h2 id="第二步-Handler"><a href="#第二步-Handler" class="headerlink" title="第二步: Handler"></a>第二步: Handler</h2><ul>
<li>创建一个 Handler 对象</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">handler = logging.StreamHandler()</div><div class="line">handler.setLevel(logging.INFO)</div></pre></td></tr></table></figure>
<p>这里创建的是<code>StreamHandler</code>，还有很多其他的，比如<code>FileHandler</code>，<code>NullHandler</code>，或者其他<a href="http://python.usyiyi.cn/python_278/library/logging.handlers.html#" target="_blank" rel="external">logging.handlers</a>, <code>StreamHandler</code> 既能输出到屏幕，又能写入日志文件，如果只需写入文件，创建 FileHandler 就行了。</p>
<h2 id="第三步-Formatter"><a href="#第三步-Formatter" class="headerlink" title="第三步: Formatter"></a>第三步: Formatter</h2><ul>
<li>创建一个 Formatter 对象,格式也有上面那些。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">formatter = logging.Formatter(<span class="string">'%(name)-12s: %(levelname)-8s %(message)s'</span>)</div></pre></td></tr></table></figure>
<h2 id="Finally"><a href="#Finally" class="headerlink" title="Finally"></a>Finally</h2><ul>
<li>整合一下就可以用了,给处理器添加一个格式，并把这个处理器添加到记录器里面</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">handler.setFormatter(formatter)</div><div class="line">logger.addHandler(handler)</div></pre></td></tr></table></figure>
<h2 id="test"><a href="#test" class="headerlink" title="test"></a>test</h2><ul>
<li>所以最后程序是这样的</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> logging</div><div class="line"></div><div class="line">logging.basicConfig(level=logging.DEBUG,</div><div class="line">                format=<span class="string">'%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s'</span>,</div><div class="line">                datefmt=<span class="string">'%a, %d %b %Y %H:%M:%S'</span>,</div><div class="line">                filename=<span class="string">'foo.log'</span>,</div><div class="line">                filemode=<span class="string">'w'</span>)</div><div class="line"></div><div class="line">logger_name = <span class="string">"balabala"</span></div><div class="line">logger = logging.getLogger(logger_name)</div><div class="line">handler = logging.StreamHandler()</div><div class="line">handler.setLevel(logging.INFO)</div><div class="line">formatter = logging.Formatter(<span class="string">'%(name)-12s: %(levelname)-8s %(message)s'</span>)</div><div class="line">console.setFormatter(formatter)</div><div class="line">logger.addHandler(handler)</div><div class="line"></div><div class="line"><span class="comment"># test, 不同操作对应不同日志级别，也就对应不同的响应</span></div><div class="line"></div><div class="line">logging.debug(<span class="string">'This is debug message'</span>)</div><div class="line">logging.info(<span class="string">'This is info message'</span>)</div><div class="line">logging.warning(<span class="string">'This is warning message'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 屏幕打印出</span></div><div class="line">root        : INFO     This <span class="keyword">is</span> info message</div><div class="line">root        : WARNING  This <span class="keyword">is</span> warning message</div><div class="line"></div><div class="line"><span class="comment"># 查看当前目录下的 foo.log</span></div><div class="line">$ car foo.log</div><div class="line">Mon, <span class="number">15</span> Aug <span class="number">2016</span> <span class="number">02</span>:<span class="number">03</span>:<span class="number">43</span> &lt;ipython-input<span class="number">-2</span><span class="number">-2694519</span>d52c6&gt;[line:<span class="number">18</span>] DEBUG This <span class="keyword">is</span> debug message</div><div class="line">Mon, <span class="number">15</span> Aug <span class="number">2016</span> <span class="number">02</span>:<span class="number">03</span>:<span class="number">43</span> &lt;ipython-input<span class="number">-2</span><span class="number">-2694519</span>d52c6&gt;[line:<span class="number">19</span>] INFO This <span class="keyword">is</span> info message</div><div class="line">Mon, <span class="number">15</span> Aug <span class="number">2016</span> <span class="number">02</span>:<span class="number">03</span>:<span class="number">43</span> &lt;ipython-input<span class="number">-2</span><span class="number">-2694519</span>d52c6&gt;[line:<span class="number">20</span>] WARNING This <span class="keyword">is</span> warning message</div></pre></td></tr></table></figure>
<ul>
<li>至此，已经创建了一个实例了。对不同的操作，能在屏幕打印不同信息，并添加到日志文件里。</li>
</ul>
<h1 id="另"><a href="#另" class="headerlink" title="另"></a>另</h1><ul>
<li><p>除了这么直接配置之外，还可以写配置文件进行配置，如 <a href="http://www.jianshu.com/p/feb86c06c4f4" target="_blank" rel="external">好吃的野菜</a> 简书文章最后。</p>
</li>
<li><p>更详细的还可以参考其他资源</p>
<ul>
<li><a href="https://docs.python.org/2/library/logging.html" target="_blank" rel="external">文档</a></li>
<li><a href="http://python.usyiyi.cn/python_278/library/logging.html#logging.basicConfig" target="_blank" rel="external">文档(中文)</a></li>
<li><a href="https://docs.python.org/2/howto/logging.html#logging-basic-tutorial" target="_blank" rel="external">logging HOWTO</a></li>
<li><a href="http://python.usyiyi.cn/python_278/howto/logging.html#logging-basic-tutorial" target="_blank" rel="external">logging HOWTO (中文)</a></li>
<li><a href="http://victorlin.me/posts/2012/08/26/good-logging-practice-in-python" target="_blank" rel="external">Good logging practice in Python</a></li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近需要使用 logging 模块，但是&lt;a href=&quot;https://docs.python.org/2/library/logging.html&quot;&gt;官方文档&lt;/a&gt; 却感觉不是那么好理解，于是找了几篇教程博客学习学习，记记笔记防止忘了。这里只记最简单的几个功能特性吧，复杂的暂时还没有用到。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://x1ah.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="http://x1ah.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>《SICP》 小结</title>
    <link href="http://x1ah.com/2016/08/13/SICP-mid/"/>
    <id>http://x1ah.com/2016/08/13/SICP-mid/</id>
    <published>2016-08-14T01:19:04.000Z</published>
    <updated>2016-10-21T12:01:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>没有什么能够阻挡，我对抽象的向往.</p>
<a id="more"></a>
<h2 id="进度"><a href="#进度" class="headerlink" title="进度"></a>进度</h2><p>龟爬的速度现在看到了 3.3 章节，打算先放一放，太耗时间，怕得不偿失。</p>
<h2 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h2><p>就前三章，先是构造过程抽象，接着构造数据抽象，再是模块化，对象和状态。 第一章几乎就是围绕”抽象过程”这四个字展开，代换模型，递归，迭代，高阶函数，都是将过程抽象出来，再组合，达到最终效果。大概就是 大事化小，从简单到复杂，可复用。</p>
<p>在编写代码过程中，我们应该对过程不断改进，优化，减小算法时间空间复杂度，从而使程序能更加高效稳健。与此同时，解决问题时，应该善于分解问题，分解出的每一个过程完成一件可以清楚标明的工作，同样使它们可以被用作定义其他过程的模块。书中有一句 “能够看清楚所考虑的动作的后果和能力，对于成为程序设计专家是直观重要的”。在问题面前，我们应该如其所说，考虑到不同的动作带来的不同后果，并对不同的后果进行选择，反向推理，选择最优，做出规划。</p>
<p>在这对迭代和递归也有了更深一层次的了解。 <em>“迭代就是那种可以用固定数目的状态变量描述的计算过程，与此同时，有存在着一套固定的规则，描述了计算过程在从一个状态到下一个状态转换时，这些变量的更新方式，还有一个<strong>结束检测</strong>，他描述这一计算过程应该终止的条件”</em>， 而对于递归，它就像一个链条，这个链条越长，需要保存的信息也就越多。对递归而言，其中还存在另外一些隐含的信息，并没有保存在状态变量里面，而是由解释器维持着。举个简单的例子：</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">;;; 递归</span></div><div class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">factorial</span> n)</div><div class="line">  (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">=</span></span> n <span class="number">1</span>) <span class="number">1</span></div><div class="line">    (<span class="name"><span class="builtin-name">*</span></span> n (<span class="name">factorial</span> (<span class="name"><span class="builtin-name">-</span></span> n <span class="number">1</span>)))))</div></pre></td></tr></table></figure>
<p>这个递归的计算过程是这样的：</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">;;; 递归</span></div><div class="line">(<span class="name">factorial</span> <span class="number">6</span>)</div><div class="line">(<span class="name"><span class="builtin-name">*</span></span> <span class="number">6</span> (<span class="name">factorial</span> <span class="number">5</span>))</div><div class="line">(<span class="name"><span class="builtin-name">*</span></span> <span class="number">6</span> (<span class="name"><span class="builtin-name">*</span></span> <span class="number">5</span> (<span class="name">factorial</span> <span class="number">4</span>)))</div><div class="line">(<span class="name"><span class="builtin-name">*</span></span> <span class="number">6</span> (<span class="name"><span class="builtin-name">*</span></span> <span class="number">5</span> (<span class="name"><span class="builtin-name">*</span></span> <span class="number">4</span> (<span class="name">factorial</span> <span class="number">3</span>))))</div><div class="line">(<span class="name"><span class="builtin-name">*</span></span> <span class="number">6</span> (<span class="name"><span class="builtin-name">*</span></span> <span class="number">5</span> (<span class="name"><span class="builtin-name">*</span></span> <span class="number">4</span> (<span class="name"><span class="builtin-name">*</span></span> <span class="number">3</span> (<span class="name">factorial</span> <span class="number">2</span>)))))</div><div class="line">(<span class="name"><span class="builtin-name">*</span></span> <span class="number">6</span> (<span class="name"><span class="builtin-name">*</span></span> <span class="number">5</span> (<span class="name"><span class="builtin-name">*</span></span> <span class="number">4</span> (<span class="name"><span class="builtin-name">*</span></span> <span class="number">3</span> (<span class="name"><span class="builtin-name">*</span></span> <span class="number">2</span> (<span class="name">factorial</span> <span class="number">1</span>))))))</div><div class="line">(<span class="name"><span class="builtin-name">*</span></span> <span class="number">6</span> (<span class="name"><span class="builtin-name">*</span></span> <span class="number">5</span> (<span class="name"><span class="builtin-name">*</span></span> <span class="number">4</span> (<span class="name"><span class="builtin-name">*</span></span> <span class="number">3</span> (<span class="name"><span class="builtin-name">*</span></span> <span class="number">2</span> <span class="number">1</span>)))))</div><div class="line">(<span class="name"><span class="builtin-name">*</span></span> <span class="number">6</span> (<span class="name"><span class="builtin-name">*</span></span> <span class="number">5</span> (<span class="name"><span class="builtin-name">*</span></span> <span class="number">4</span> (<span class="name"><span class="builtin-name">*</span></span> <span class="number">3</span> <span class="number">2</span>))))</div><div class="line">(<span class="name"><span class="builtin-name">*</span></span> <span class="number">6</span> (<span class="name"><span class="builtin-name">*</span></span> <span class="number">5</span> (<span class="name"><span class="builtin-name">*</span></span> <span class="number">4</span> <span class="number">6</span>)))</div><div class="line">(<span class="name"><span class="builtin-name">*</span></span> <span class="number">6</span> (<span class="name"><span class="builtin-name">*</span></span> <span class="number">5</span> <span class="number">24</span>))</div><div class="line">(<span class="name"><span class="builtin-name">*</span></span> <span class="number">6</span> <span class="number">120</span>)</div><div class="line"><span class="number">720</span></div></pre></td></tr></table></figure>
<p>同样再来看看迭代的过程：</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">;;; 迭代</span></div><div class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">factorial</span> n)</div><div class="line">  (<span class="name">fact-iter</span> <span class="number">1</span> <span class="number">1</span> n))</div><div class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">fact-iter</span> product counter max-count)</div><div class="line">  (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">&gt;</span></span> counter max-count) product</div><div class="line">    (<span class="name">fact-iter</span> (<span class="name"><span class="builtin-name">*</span></span> counter product)</div><div class="line">                (<span class="name"><span class="builtin-name">+</span></span> counter <span class="number">1</span>)</div><div class="line">                max-count)))</div></pre></td></tr></table></figure>
<p>计算过程：</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">;;; 迭代</span></div><div class="line">(<span class="name">factorial</span> <span class="number">6</span>)</div><div class="line">(<span class="name">fact-iter</span> <span class="number">1</span> <span class="number">1</span> <span class="number">6</span>)</div><div class="line">(<span class="name">fact-iter</span> <span class="number">1</span> <span class="number">2</span> <span class="number">6</span>)</div><div class="line">(<span class="name">fact-iter</span> <span class="number">2</span> <span class="number">3</span> <span class="number">6</span>)</div><div class="line">(<span class="name">fact-iter</span> <span class="number">6</span> <span class="number">4</span> <span class="number">6</span>)</div><div class="line">(<span class="name">fact-iter</span> <span class="number">24</span> <span class="number">5</span> <span class="number">6</span>)</div><div class="line">(<span class="name">fact-iter</span> <span class="number">120</span> <span class="number">6</span> <span class="number">6</span>)</div><div class="line">(<span class="name">fact-iter</span> <span class="number">720</span> <span class="number">7</span> <span class="number">6</span>)</div></pre></td></tr></table></figure>
<p>对比这两个过程，明显的发现，递归就好像一条推迟进行的操作形成的链条，要执行这一过程，解释器酒需要维护好这些操作的轨迹，复杂度随n线性增长，而迭代过程始终就几个状态变量。</p>
<p>在 SICP 里面，还有一个思想感觉挺重要，<strong>定义一个不变量，要求它在状态之间保持不变（这一技术是思考迭代算法非常有力的方法）</strong>. 除此之外，我们也应该设法在程序中识别出基本抽象。</p>
<p>第二章围绕着 “数据抽象” 展开，从 序对–&gt;列表–&gt;树–&gt;集合, ~全方面~ 阐述了 “数据抽象”， 在第二章，对其中的 “<strong>愿望思维</strong>“ 很是印象深刻，假设现在已经有了这些功能模块，过程，之后能根据这些功能构造出在其基础之上的一些功能，之后只需要去构造这些基础功能就行了。之后便是在序对的基础上，构造一系列数据结构，<strong>闭包性质</strong> 是一个很强有力的性质，书中的解释是 “<em>某种组合数据对象的操作满足闭包性质，那就是说，通过他组合起的数据对象得到的结果本身还可以通过同样的操作进行再组合， 它是我们能够建立起层次性结构</em>“, 通俗的讲，就是某种结构由一些部分构成，而这些部分又是由他们的部分构成，并可以如此继续下去，举个简单的例子，就一颗大树来说，这颗大树由主干和主干上的那些个树枝组成，而对这些树枝，又是由一些小树枝组成，再往下，这些小树枝又是由更小的树枝组成，由此以往。这就跟闭包一样了。层层而下。</p>
<p>在程序设计过程中，我们也应该学会建立起抽象屏障。先抽象，再具体。先不考虑对象实际上该如何表示，而是对抽象对象操作，以后才去关心具体表示问题。</p>
<p>之后，我们应尽量抽象出一套通用的系统，用书上的话讲就是 “抽象出一个带有通用型操作的系统”， 一步一步进行抽象，最后达到目的。使程序可加，可扩展，通用性高，可维护，并尽可能的抽象过程，建立抽象屏障。</p>
<p>第三章开篇有两句话</p>
<blockquote>
<p>即使在变化中，它也丝毫未变。———Heraclitus</p>
<p>变得越多，它就越是原来的样子。 ———-Alphonse Karr</p>
</blockquote>
<p>但是之前了解过这些命名空间，局部变量全局变量之类，倒是乜有很新鲜的东西。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>现在才明白《黑客与画家》里面推崇 Lisp 也是有道理的，这样一门函数式编程语言很是有趣，这样一个语言工具也是颇有韵味的, 人人都应该学一门函数式编程语言。《SICP》 给我们更多的是思想方面的，教我们如何设计程序，写出好程序。有机会再拜读之。受益匪浅。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;没有什么能够阻挡，我对抽象的向往.&lt;/p&gt;
    
    </summary>
    
      <category term="读书" scheme="http://x1ah.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="Books" scheme="http://x1ah.com/tags/Books/"/>
    
  </entry>
  
  <entry>
    <title>初探《SICP》</title>
    <link href="http://x1ah.com/2016/07/16/start-SICP/"/>
    <id>http://x1ah.com/2016/07/16/start-SICP/</id>
    <published>2016-07-17T02:21:43.000Z</published>
    <updated>2016-10-21T12:04:08.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<ul>
<li>计算机是一位一丝不苟的工匠：它的程序必须正确，我们希望说的所有东西，都必须表述的准确到每一个细节。</li>
<li>每个读者应该反复地问自己“到哪里才是头儿，到哪里才是头儿？”—-但是不要问得过于频繁，以免忽略了程序设计的乐趣，使自己陷入一种喜忧参半的呆滞状态中。</li>
</ul>
</blockquote>
<a id="more"></a>
<p>从来文笔就不好，高中写作文也都是把自己平常背的段子模仿着写上，人丑还偏偏要作怪，突然想写这么一篇随笔记录记录，有时候也就是这样，想法来了，挡也挡不住。</p>
<p>SICP 自古以来就被认为是极端，有人认为是极其经典的程序员必读书籍，同样的，有人认为这书太烂了，讲的什么玩意儿，也因此，认为是经典的开始说教另外一波人，你们这种低智商的人是体会不到 SICP 的乐趣的。带着敬畏与求知的欲望和探索，也开始了 SICP 之旅。</p>
<p>自己看书都喜欢先把前言，序之类的先看一遍，因此上面那两句也就异常印象稍稍深刻一点，对人撒谎，或许能骗过去，但是对计算机而言，除了 0 就是 1，没有撒谎的余地，如果抱存侥幸心理对其 “撒谎” 了，那么得不偿失的只会是自己，无尽的 Debug。每个人都会有自己的 Dream，有自己的追求，一如 自己希望能够 “放荡不羁真自由”，而不是 “放荡不羁而只是<em>爱</em>自由而已”。想写代码的时候，打开电脑，一如既往的<code>ctrl + alt + t</code>，每一次指尖与键盘的接触，每一行代码，每一个函数都是一次享受。想出去玩了叫上三两好友，骑上心爱的自行车，来上百十公里，何尝不是享受。但是，到哪里才是头儿？生命的结束就是一个人生命的头儿？并不是！</p>
<p>言归正传。。 第一眼 SICP 共四章, 似乎跟平常砖头书教科书不太一样啊，一般少说都有十几二十章，要不然这么能显示出书内容之多，之广呢。细看这些章节目录，woc，这些名字看着很是高大上呀，一个个都是没有听过的，什么 “抽象屏障” “无穷流”, 浏览完这些那么开始看正文吧。</p>
<p>第一章，”构造过程抽象“，一开始可能并没有完全精神高度集中，看了一两节，似乎也就这样吧，但是习题却有所挫败，于是乎从头开始看，这次似乎能理解一些了，但是却依然没有很特别的感觉。看到第三节，还是从头再看一遍吧，这次一定要自己揣摩揣摩，前面两次已经浪费了一上午，这一看，又是一下午，而这次却自觉有所领悟，或许是函数式语言 Lisp 的特性吧，跟 oop 却有些许相通。花了大篇幅讲解迭代，递归，说”能够看清楚所考虑的动作的后果的能力，——“ ，阐述 “过程抽象” 是怎么一回事，整个围绕 “抽象” 这一概念展开。习题也很是有针对性，但是也很需要推敲，可能接触数学接触的稍微多一些，也就并没有感觉到这些数学问题有很难。</p>
<p>能感受到的是，要完全理解 SICP ，真不是一个小 CASE，但，虽然才翻开，却也体会到了其中的一些干货，希望能完成之。</p>
<p>写到这里，卡住了，写不下去了。开头废话多，正文叙述却少得可怜，放高考，又是一篇不及格的读后感。表述能力日益下降 或说 从来没有高过。</p>
<p>起风了，我们唯有努力生存.</p>
<p>end.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;计算机是一位一丝不苟的工匠：它的程序必须正确，我们希望说的所有东西，都必须表述的准确到每一个细节。&lt;/li&gt;
&lt;li&gt;每个读者应该反复地问自己“到哪里才是头儿，到哪里才是头儿？”—-但是不要问得过于频繁，以免忽略了程序设计的乐趣，使自己陷入一种喜忧参半的呆滞状态中。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="读书" scheme="http://x1ah.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="Books" scheme="http://x1ah.com/tags/Books/"/>
    
  </entry>
  
  <entry>
    <title>Python 模拟登录百度，贴吧签到</title>
    <link href="http://x1ah.com/2016/06/18/sign-Baidu-Tieba/"/>
    <id>http://x1ah.com/2016/06/18/sign-Baidu-Tieba/</id>
    <published>2016-06-19T02:38:49.000Z</published>
    <updated>2016-10-21T12:03:52.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>写此笔记记录以下<br>很久之前，天天泡贴吧，看水贴，收藏表情包，抢首签，连签几百天之后的突然某天，忘记签到，没有补签卡，断送了我辛辛苦苦的几百天努力，一怒之下卸载贴吧，从此不再干这种蠢事，<br>前些阵子建了个<a href="https://github.com/xiahei/Python_projects" target="_blank" rel="external">日常任务自动化脚本仓库</a>，让日常重复任务都自动去完成，毕竟懒嘛。这才想起来把贴吧这东西也放进去自己签到。<br>于是便写了这么个脚本，加上GUI 打包exe让同学也能得以使用。<br><a id="more"></a></p>
</blockquote>
<ul>
<li>代码：<a href="https://github.com/xiahei/Python_projects/tree/master/Baidu" target="_blank" rel="external">GitHub</a> </li>
</ul>
<h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><ul>
<li>模拟登录的时候发现登录时需要post的参数很多<img src="http://ww3.sinaimg.cn/large/005NaGmtjw1f4zrpgqftqj30mu0e5whr.jpg" alt="pic"><ul>
<li>结果都去找，找了很久，浪费了很多时间，最后发现需要的参数就<code>token</code>, <code>tpl</code>, <code>loginmerge</code>（因为这个参数，浪费了最多时间）, <code>username</code>, <code>password</code>。密码都是明文，没有加密。</li>
<li>接着就找这些参数了。</li>
<li>抓包，调试各种找， <code>token</code> 在 <a href="https://passport.baidu.com/v2/api/?getapi&amp;tpl=tb&amp;apiver=v3" target="_blank" rel="external">https://passport.baidu.com/v2/api/?getapi&amp;tpl=tb&amp;apiver=v3</a>这个api获取</li>
<li>找到了就可以post登录了。</li>
<li>通过获取用户信息来确定是否登录成功。<a href="http://tieba.baidu.com/f/user/json_userinfo" target="_blank" rel="external">http://tieba.baidu.com/f/user/json_userinfo</a></li>
</ul>
</li>
</ul>
<h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><ul>
<li>第一次写完之后发现一天只能签20个吧，之后便需要验证码，DIE.</li>
<li>之后发现了<a href="http://tieba.baidu.com/mo/m" target="_blank" rel="external">http://tieba.baidu.com/mo/m</a>这么个站，其实就是手机端，没有了吧数限制，也解决了验证码问题.</li>
<li>接着就只需要抓<a href="http://tieba.baidu.com/mo/m?tn=bdFBW&amp;tab=favorite" target="_blank" rel="external">http://tieba.baidu.com/mo/m?tn=bdFBW&amp;tab=favorite</a>所有关注的吧进行签到了，发现签到还有手机端2点经验加成，hhh</li>
</ul>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><ul>
<li>完成了就可以挂在服务器上设置 crontab 定时任务自己跑了。</li>
</ul>
<h2 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h2><p><img src="http://ww4.sinaimg.cn/large/005NaGmtjw1f4yn4wrnxqj30yl08zaef.jpg" alt="res"><br><img src="http://ww2.sinaimg.cn/large/005NaGmtjw1f4yn4j1um9j30p007h0w5.jpg" alt="res"></p>
<h3 id="GUI"><a href="#GUI" class="headerlink" title="GUI"></a>GUI</h3><ul>
<li>不会写GUI，试着用Tkinter试了试，<code>pyinstaller</code> 打包exe，之后exe足足有8兆之大，启动速度极慢，也不知道这么搞.</li>
<li>后来得知避免编译成一个文件，可以避免加载速度过慢，get it.</li>
</ul>
<p><img src="http://ww3.sinaimg.cn/large/005NaGmtjw1f4zqdvesjej30gy0k242r.jpg" alt="GUI"></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><ul>
<li>脚踏实地的学，脚踏实地的玩.</li>
</ul>
<blockquote>
<p>编程：付出永远和回报成正比.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;写此笔记记录以下&lt;br&gt;很久之前，天天泡贴吧，看水贴，收藏表情包，抢首签，连签几百天之后的突然某天，忘记签到，没有补签卡，断送了我辛辛苦苦的几百天努力，一怒之下卸载贴吧，从此不再干这种蠢事，&lt;br&gt;前些阵子建了个&lt;a href=&quot;https://github.com/xiahei/Python_projects&quot;&gt;日常任务自动化脚本仓库&lt;/a&gt;，让日常重复任务都自动去完成，毕竟懒嘛。这才想起来把贴吧这东西也放进去自己签到。&lt;br&gt;于是便写了这么个脚本，加上GUI 打包exe让同学也能得以使用。&lt;br&gt;
    
    </summary>
    
      <category term="玩具" scheme="http://x1ah.com/categories/%E7%8E%A9%E5%85%B7/"/>
    
    
      <category term="Python" scheme="http://x1ah.com/tags/Python/"/>
    
      <category term="Lab" scheme="http://x1ah.com/tags/Lab/"/>
    
  </entry>
  
  <entry>
    <title>备份你的 *NIX 系统</title>
    <link href="http://x1ah.com/2016/05/18/backup_your_linux/"/>
    <id>http://x1ah.com/2016/05/18/backup_your_linux/</id>
    <published>2016-05-18T16:54:05.000Z</published>
    <updated>2016-10-27T16:16:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>居安思危，时刻保持警惕，做好最坏打算，定时备份你的系统，以防突发情况.</p>
<p>“<strong>一切皆文件</strong>“ 是 Unix / Linux 的基本哲学思想之一，正是得益于这一点，使得我们的系统备份工作变得异常简单，既然一切皆文件，那么把所有文件备份一下就行了.</p>
<a id="more"></a>
<h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><ul>
<li>插上移动硬盘/U盘并自动挂载(普遍情况下会自动)在 <code>/media/&lt;yourname&gt;/&lt;you_disk_name&gt;</code> 下，或者要备份到某个目录下而不是移动存储设备。</li>
<li>切换至根目录<code>cd /</code></li>
<li>开始备份(比如备份至移动存储设备) <code>sudo tar -cvpzf /media/&lt;yourname&gt;/&lt;backup_name&gt;.tgz --exclude=/proc --exclude=/lost+found --exclude=/media --exclude=/mnt --exclude=/sys /</code> 可能需要一点时间，等待之.<ul>
<li><code>--exclude=/&lt;PATH&gt;</code> 之后的PATH为备份时排除的目录，即这些不需要备份，我一般把上面五个目录都给排除了。</li>
</ul>
</li>
<li>上面的 <code>&lt;yourname&gt;/&lt;backup_name&gt;.tgz</code> 可换成别的目录，对应也就备份至该目录了，Hint: 备份成<code>.tgz</code>格式就行了.也方便还原.</li>
<li>得到了<code>xxx.tgz</code>即你的系统备份.</li>
</ul>
<h3 id="还原"><a href="#还原" class="headerlink" title="还原"></a>还原</h3><ul>
<li>假如你的系统备份文件为<code>/path/backup.tgz</code></li>
<li><code>cd / &amp;&amp; sudo tar -xvpzf /path/backup.tgz -C /</code> 可能需要一点时间，等待之. 完成后再新建之前排除的目录(<code>sudo mkdir /proc /media /mnt /sys</code> etc….)</li>
<li>重启，还原成功.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;居安思危，时刻保持警惕，做好最坏打算，定时备份你的系统，以防突发情况.&lt;/p&gt;
&lt;p&gt;“&lt;strong&gt;一切皆文件&lt;/strong&gt;“ 是 Unix / Linux 的基本哲学思想之一，正是得益于这一点，使得我们的系统备份工作变得异常简单，既然一切皆文件，那么把所有文件备份一下就行了.&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://x1ah.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Linux" scheme="http://x1ah.com/tags/Linux/"/>
    
      <category term="Daily" scheme="http://x1ah.com/tags/Daily/"/>
    
  </entry>
  
  <entry>
    <title>Linux新建文件自动添加头部信息</title>
    <link href="http://x1ah.com/2016/05/16/Newtouch/"/>
    <id>http://x1ah.com/2016/05/16/Newtouch/</id>
    <published>2016-05-17T02:45:11.000Z</published>
    <updated>2016-10-21T12:02:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>GitHub: <a href="https://github.com/xiahei/Python-project/tree/master/Newtouch" target="_blank" rel="external">[Newtouch]</a><br><a id="more"></a><br>使用：</p>
<ul>
<li>如果代码的路径为<code>path/Newtouch.py</code></li>
<li><code>vim ~/.bashrc</code></li>
<li>添加<code>alias addth=&#39;python path/Newtouch.py&#39;</code>一行</li>
<li>使其生效 <code>source ~/.bashrc</code></li>
<li>测试一下<ul>
<li><code>addth foo.py</code></li>
</ul>
</li>
<li>对应其他语言在代码中<code>header_msg</code>字典中添加相应头部信息即可<ul>
<li>例如 C语言 添加 <code>&#39;c&#39;: &#39;#include &lt;stdio.h&gt;\n&#39;</code></li>
</ul>
</li>
<li>极其简单的脚本，解析命令行参数就行了.</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding:utf-8</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> argparse</div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">'current dir ====&gt; &#123;0&#125;\n&#123;1&#125;'</span>.format(os.getcwd(), <span class="string">'*'</span>*<span class="number">40</span>)</div><div class="line"></div><div class="line">parser = argparse.ArgumentParser(description=<span class="string">'A script for add script header message'</span>)</div><div class="line">parser.add_argument(<span class="string">'newfile'</span>)</div><div class="line"></div><div class="line">args = parser.parse_args()</div><div class="line"></div><div class="line">header_msg = &#123;</div><div class="line">    <span class="string">'py'</span>: <span class="string">'#!/usr/bin/env python\n# coding:utf-8\n'</span>,</div><div class="line">    <span class="string">'c'</span>: <span class="string">'#include &lt;stdio.h&gt;\n'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> os.path.exists(os.getcwd()+<span class="string">'/'</span>+args.newfile):</div><div class="line">    <span class="keyword">print</span> <span class="string">'\tfile already exists...'</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">if</span> len(args.newfile.split(<span class="string">'.'</span>)) == <span class="number">2</span>:</div><div class="line">        newfile_type = args.newfile.split(<span class="string">'.'</span>)[<span class="number">-1</span>]</div><div class="line"></div><div class="line">        <span class="keyword">if</span> newfile_type <span class="keyword">in</span> header_msg:</div><div class="line">            f = open(args.newfile, <span class="string">'w'</span>)</div><div class="line">            <span class="keyword">print</span> <span class="string">'\tadding header msg...'</span></div><div class="line">            f.write(header_msg[newfile_type])</div><div class="line">            f.close()</div><div class="line">            msg = <span class="string">'created %s'</span> % args.newfile</div><div class="line">            <span class="keyword">print</span> msg.center(<span class="number">40</span>, <span class="string">'*'</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            temp = open(args.newfile, <span class="string">'w'</span>)</div><div class="line">            temp.close()</div><div class="line">            <span class="keyword">print</span> <span class="string">'\tcreated '</span>, args.newfile</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        temp = open(args.newfile, <span class="string">'w'</span>)</div><div class="line">        temp.close()</div><div class="line">        <span class="keyword">print</span> <span class="string">'\tcreated '</span>, args.newfile</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;GitHub: &lt;a href=&quot;https://github.com/xiahei/Python-project/tree/master/Newtouch&quot;&gt;[Newtouch]&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="玩具" scheme="http://x1ah.com/categories/%E7%8E%A9%E5%85%B7/"/>
    
    
      <category term="Python" scheme="http://x1ah.com/tags/Python/"/>
    
      <category term="Lab" scheme="http://x1ah.com/tags/Lab/"/>
    
      <category term="Linux" scheme="http://x1ah.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Python 模拟登录V2EX并完成每日签到任务</title>
    <link href="http://x1ah.com/2016/05/15/sign-V2EX/"/>
    <id>http://x1ah.com/2016/05/15/sign-V2EX/</id>
    <published>2016-05-16T02:46:40.000Z</published>
    <updated>2016-10-21T12:04:40.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Talk is cheap show code.</p>
</blockquote>
<ul>
<li>代码：<br>GitHub: <a href="https://github.com/xiahei/Python-project/tree/master/Dailyv2ex" target="_blank" rel="external">[V2ex]</a></li>
</ul>
<a id="more"></a>
<p>依赖:</p>
<ul>
<li><code>requests</code></li>
<li><code>bs4</code></li>
<li><code>lxml</code>.<ul>
<li>或者自带的<code>html.parser</code>，将所有的<code>lxml</code> 替换为<code>html.parser</code></li>
</ul>
</li>
</ul>
<h3 id="feel"><a href="#feel" class="headerlink" title="feel"></a>feel</h3><ul>
<li>编写简单，没有什么难点，体力活.</li>
</ul>
<h3 id="单次签到"><a href="#单次签到" class="headerlink" title="单次签到"></a>单次签到</h3><ul>
<li><p>使用：</p>
<ul>
<li><code>python v2ex.py</code></li>
</ul>
</li>
<li><p>签到金币时间写入日志</p>
</li>
<li>签到成功打印获得金币数</li>
<li>已签到情况下打印最近一次签到获得金币</li>
</ul>
<p>登录函数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span></div><div class="line">    sess = requests.Session()</div><div class="line">    LoginHtml = sess.get(<span class="string">'http://www.v2ex.com/signin'</span>, headers=self.headers)</div><div class="line">    LoginSoup = BeautifulSoup(LoginHtml.text, <span class="string">'lxml'</span>)</div><div class="line">    usrnamecode = LoginSoup.find(<span class="string">'input'</span>, &#123;<span class="string">'class'</span>: <span class="string">'sl'</span>&#125;)[<span class="string">'name'</span>]</div><div class="line">    usrpswdcode = LoginSoup.find(<span class="string">'input'</span>, &#123;<span class="string">'type'</span>: <span class="string">'password'</span>&#125;)[<span class="string">'name'</span>]</div><div class="line">    once = LoginSoup.find(<span class="string">'input'</span>, &#123;<span class="string">'name'</span>: <span class="string">'once'</span>&#125;)[<span class="string">'value'</span>]</div><div class="line">    form_data = &#123;</div><div class="line">        usrnamecode: self.usrname,</div><div class="line">        usrpswdcode: self.usrpswd,</div><div class="line">        <span class="string">'once'</span>: once,</div><div class="line">        <span class="string">'next'</span>: <span class="string">'/'</span></div><div class="line">        &#125;</div><div class="line">    sess.post(<span class="string">'http://www.v2ex.com/signin'</span>, form_data, headers=self.headers)</div><div class="line">    sethtml = sess.get(<span class="string">'http://www.v2ex.com/settings'</span>, headers=self.headers)</div><div class="line">    soup = BeautifulSoup(sethtml.text, <span class="string">'lxml'</span>)</div><div class="line">    email = soup.find(<span class="string">'input'</span>, &#123;<span class="string">'type'</span>: <span class="string">'email'</span>&#125;)[<span class="string">'value'</span>]</div><div class="line">    status = <span class="keyword">True</span> <span class="keyword">if</span> email <span class="keyword">else</span> <span class="keyword">False</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'登录成功！'</span> <span class="keyword">if</span> status <span class="keyword">else</span> <span class="string">'登录失败！'</span></div><div class="line">    <span class="keyword">return</span> [sess, status]</div></pre></td></tr></table></figure>
<h3 id="服务器每日签到"><a href="#服务器每日签到" class="headerlink" title="服务器每日签到"></a>服务器每日签到</h3><ul>
<li>由于需要在服务器上跑。所以修改了一下..。</li>
</ul>
<p>添加crontab任务</p>
<ul>
<li>Ubuntu: <code>sudo apt-get install crontab</code></li>
<li><code>crontab -e</code></li>
<li><code>01 0 * * * . /etc/profile;/usr/bin/python /存的绝对路径</code>  , 每天0点1分签到</li>
</ul>
<p>查看日志结果大概是这样：<br><img src="http://i.imgur.com/JshS2Pa.png" alt="log"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Talk is cheap show code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;代码：&lt;br&gt;GitHub: &lt;a href=&quot;https://github.com/xiahei/Python-project/tree/master/Dailyv2ex&quot;&gt;[V2ex]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="玩具" scheme="http://x1ah.com/categories/%E7%8E%A9%E5%85%B7/"/>
    
    
      <category term="Python" scheme="http://x1ah.com/tags/Python/"/>
    
      <category term="Lab" scheme="http://x1ah.com/tags/Lab/"/>
    
  </entry>
  
  <entry>
    <title>CUMTB学生成绩个人信息查询</title>
    <link href="http://x1ah.com/2016/02/22/CUMTB/"/>
    <id>http://x1ah.com/2016/02/22/CUMTB/</id>
    <published>2016-02-23T04:46:27.000Z</published>
    <updated>2016-10-21T12:02:37.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>中国矿业大学（北京）学生成绩查询</p>
</blockquote>
<p>GitHub: <a href="https://github.com/xiahei/Python-project/tree/master/StuScore" target="_blank" rel="external">[CUMTB]</a></p>
<a id="more"></a>
<ul>
<li>依赖：<ul>
<li><code>requests</code></li>
<li><code>bs4</code></li>
<li><code>lxml</code><ul>
<li>可用<code>html.parser</code>代替</li>
</ul>
</li>
<li><code>Python2</code></li>
<li><code>prettytable</code><br>使用:</li>
</ul>
</li>
<li><code>python Scory.py</code></li>
</ul>
<p>登录函数:<br>```python<br>def login(self):<br>    ‘’’<br>    模拟登录教务系统<br>    :param username:<br>    :param pswd:<br>    :return: 登录状态<br>    ‘’’<br>    login_url = ‘<a href="http://219.242.68.33/Login.aspx" target="_blank" rel="external">http://219.242.68.33/Login.aspx</a>‘<br>    form_data = {<br>        “ToolkitScriptManager1_HiddenField”: “”,<br>        “<strong>EVENTTARGET”: “”,<br>        “</strong>EVENTARGUMENT”: “”,<br>        “<strong>VIEWSTATE”: “/wEPDwUKMTY0Njg4MjEwM2Rkj+Af8kaVOxsefGZECk5PM6rOOYgs0taVhQxQSxoC298=”,<br>        “</strong>VIEWSTATEGENERATOR”: “C2EE9ABB”,<br>        “__EVENTVALIDATION”: “/wEWCQKK9JioBQLB2tiHDgK1qbSRCwLB9fLCCQKVwf3jAwL7jJeqDQK2yLNyAoyp3LQNAoLch4YM4/7Gzd6qXWcFlpTQVOKRLsJcEeZ1kj5lh7u9AQrHyms=”,<br>        “txtUser”: self.usrname,<br>        “txtPassword”: self.usrpswd,<br>        “rbLx”: “学生”,<br>        “btnLogin”: “ 登 录 “<br>    }<br>    header = {<br>        “User-Agent”: “Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.86 Safari/537.36”<br>    }<br>    self.headers = header<br>    s = requests.session()<br>    response = s.post(url=login_url, data=form_data, headers=header)<br>‘’’</p>
<p>登录:<br><img src="http://i.imgur.com/0qN0C0T.png" alt="login"><br>个人信息:<br><img src="http://i.imgur.com/CM5DyZD.png" alt="ifo"><br>选修课:<br><img src="http://i.imgur.com/Gj7knBF.png" alt="re"><br>成绩:<br><img src="http://i.imgur.com/lENf7FY.png" alt="score"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;中国矿业大学（北京）学生成绩查询&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;GitHub: &lt;a href=&quot;https://github.com/xiahei/Python-project/tree/master/StuScore&quot;&gt;[CUMTB]&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="玩具" scheme="http://x1ah.com/categories/%E7%8E%A9%E5%85%B7/"/>
    
    
      <category term="Python" scheme="http://x1ah.com/tags/Python/"/>
    
      <category term="Lab" scheme="http://x1ah.com/tags/Lab/"/>
    
  </entry>
  
</feed>
